name: CI

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release Version'
        required: true
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  release-windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: Update SubModules
        run: |
          git submodule init
          git submodule update
      
      - name: Install 7-zip
        run: |
          Invoke-WebRequest -Uri https://7-zip.org/a/7z1900-x64.msi -OutFile 7z.msi
          msiexec.exe /package 7z.msi /qn
          echo "C:\Program Files\7-Zip" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
      - name: Create Archive Directories
        run: |
          mkdir Win
          mkdir Win/entt
          mkdir Win/entt/Include
          mkdir Win/glm
          mkdir Win/glm/Include
          mkdir Win/rapidjson
          mkdir Win/rapidjson/Include
          mkdir Win/taskflow
          mkdir Win/taskflow/Include
          mkdir Win/glfw
          mkdir Win/glfw/Include
          mkdir Win/glfw/Lib
          mkdir Win/glfw/Lib/Debug
          mkdir Win/glfw/Lib/Release
          mkdir Win/gflags
          mkdir Win/gflags/Include
          mkdir Win/gflags/Lib
          mkdir Win/gflags/Lib/Debug
          mkdir Win/gflags/Lib/Release
          mkdir Win/assimp
          mkdir Win/assimp/Include
          mkdir Win/assimp/Lib
          mkdir Win/assimp/Lib/Debug
          mkdir Win/assimp/Lib/Release
          mkdir Win/googletest
          mkdir Win/googletest/Include
          mkdir Win/googletest/Lib
          mkdir Win/googletest/Lib/Debug
          mkdir Win/googletest/Lib/Release
          mkdir Win/glslang
          mkdir Win/glslang/Lib
          mkdir Win/glslang/Lib/Debug
          mkdir Win/glslang/Lib/Release
      
      - name: Archiving CMakeLists
        run: |
          cp CMakeLists.txt Win
          
      - name: Modifying CMakeLists
        run: |
          echo 'set(EXP_3RD_VERSION ${{ github.event.inputs.version }} CACHE INTERNAL "Current thirdparty version.")' | Out-File  -FilePath Win/CMakeLists.txt -Encoding utf8 -Append

      - name: Archiving EnTT
        run: |
          cp -r entt/single_include/entt Win/entt/Include
      
      - name: Archiving GLM
        run: |
          cp -r glm/glm Win/glm/Include/glm
          rm Win/glm/Include/glm/CMakeLists.txt
      
      - name: Archiving rapidjson
        run: |
          cp -r rapidjson/include/rapidjson Win/rapidjson/Include/rapidjson
      
      - name: Archiving TaskFlow
        run: |
          cp -r taskflow/taskflow Win/taskflow/Include/taskflow
      
      - name: Building GFlags
        run: |
          cmake -S gflags -B gflags/build-debug -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON -DBUILD_gflags_LIB=OFF -DBUILD_gflags_nothreads_LIB=ON -DBUILD_PACKAGING=OFF -DBUILD_TESTING=OFF -DINSTALL_HEADERS=ON -DINSTALL_SHARED_LIBS=OFF -DINSTALL_STATIC_LIBS=ON -DREGISTER_BUILD_DIR=OFF -DREGISTER_INSTALL_PREFIX=OFF -DCMAKE_INSTALL_PREFIX=gflags/build-debug/install
          cmake --build gflags/build-debug --config Debug -j 8
          cmake --install gflags/build-debug --config Debug
          cmake -S gflags -B gflags/build-release -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON -DBUILD_gflags_LIB=OFF -DBUILD_gflags_nothreads_LIB=ON -DBUILD_PACKAGING=OFF -DBUILD_TESTING=OFF -DINSTALL_HEADERS=ON -DINSTALL_SHARED_LIBS=OFF -DINSTALL_STATIC_LIBS=ON -DREGISTER_BUILD_DIR=OFF -DREGISTER_INSTALL_PREFIX=OFF -DCMAKE_INSTALL_PREFIX=gflags/build-release/install
          cmake --build gflags/build-release --config release -j 8
          cmake --install gflags/build-release --config release
      
      - name: Archiving GFlags
        run: |
          cp -r gflags/build-debug/install/include/* Win/gflags/Include
          cp -r gflags/build-debug/install/lib/* Win/gflags/Lib/Debug
          cp -r gflags/build-release/install/lib/* Win/gflags/Lib/Release
      
      - name: Building Assimp
        run: |
          cmake -S assimp -B assimp/build-debug -DBUILD_SHARED_LIBS=OFF -DASSIMP_BUILD_TESTS=OFF
          cmake --build assimp/build-debug --config Debug -j 8
          cmake -S assimp -B assimp/build-release -DBUILD_SHARED_LIBS=OFF -DASSIMP_BUILD_TESTS=OFF
          cmake --build assimp/build-release --config Release -j 8
      
      - name: Archiving Assimp
        run: |
          cp -r assimp/include/* Win/assimp/Include
          cp assimp/build-debug/include/assimp/config.h Win/assimp/Include/assimp
          cp assimp/build-debug/lib/Debug/assimp-vc142-mtd.lib Win/assimp/Lib/Debug
          cp assimp/build-debug/lib/Debug/assimp-vc142-mtd.pdb Win/assimp/Lib/Debug
          cp assimp/build-release/lib/Release/assimp-vc142-mt.lib Win/assimp/Lib/Release
          
      - name: Building GLFW
        run: |
          mkdir glfw/build-debug
          cmake -S glfw -B glfw/build -DGLFW_BUILD_EXAMPLES=false -DGLFW_BUILD_TESTS=false -DGLFW_BUILD_DOCS=false -DUSE_MSVC_RUNTIME_LIBRARY_DLL=OFF
          cmake --build glfw/build --config Debug -j 8
          cmake --build glfw/build --config Release -j 8
      
      - name: Archiving GLFW
        run: |
          cp glfw/build/src/Debug/glfw3.lib Win/glfw/Lib/Debug
          cp glfw/build/src/Debug/glfw3.pdb Win/glfw/Lib/Debug
          cp glfw/build/src/Release/glfw3.lib Win/glfw/Lib/Release
          cp -r glfw/include/GLFW Win/glfw/Include/GLFW
      
      - name: Building GoogleTest
        run: |
          mkdir googletest/build-debug
          cmake -S googletest -B googletest/build
          cmake --build googletest/build --config Debug -j 8
          cmake --build googletest/build --config Release -j 8
      
      - name: Archiving Google Test
        run: |
          cp googletest/build/lib/Debug/gtestd.lib Win/googletest/Lib/Debug
          cp googletest/build/lib/Debug/gmockd.lib Win/googletest/Lib/Debug
          cp googletest/build/lib/Debug/gtest_maind.lib Win/googletest/Lib/Debug
          cp googletest/build/lib/Debug/gmock_maind.lib Win/googletest/Lib/Debug
          cp googletest/build/lib/Debug/gtestd.pdb Win/googletest/Lib/Debug
          cp googletest/build/lib/Debug/gmockd.pdb Win/googletest/Lib/Debug
          cp googletest/build/lib/Debug/gtest_maind.pdb Win/googletest/Lib/Debug
          cp googletest/build/lib/Debug/gmock_maind.pdb Win/googletest/Lib/Debug
          cp googletest/build/lib/Release/gtest.lib Win/googletest/Lib/Release
          cp googletest/build/lib/Release/gmock.lib Win/googletest/Lib/Release
          cp googletest/build/lib/Release/gtest_main.lib Win/googletest/Lib/Release
          cp googletest/build/lib/Release/gmock_main.lib Win/googletest/Lib/Release
          cp -r googletest/googletest/include/gtest Win/googletest/Include/gtest
          cp -r googletest/googlemock/include/gmock Win/googletest/Include/gmock

      - name: Building Glslang
        run: |
          cmake -S glslang -B glslang/build-debug -DBUILD_TESTING=false -DENABLE_CTEST=false -DCMAKE_INSTALL_PREFIX=glslang/build-debug -DLLVM_USE_CRT_DEBUG=MTd
          cmake --build glslang/build-debug --config Debug -j 8
          cmake --install glslang/build-debug --config Debug
          cmake -S glslang -B glslang/build-release -DBUILD_TESTING=false -DENABLE_CTEST=false -DCMAKE_INSTALL_PREFIX=glslang/build-release -DLLVM_USE_CRT_RELEASE=MT
          cmake --build glslang/build-release --config Release -j 8
          cmake --install glslang/build-release --config Release

      - name: Archiving Glslang
        run: |
          cp glslang/build-debug/lib/*.lib Win/glslang/Lib/Debug
          cp glslang/build-release/lib/*.lib Win/glslang/Lib/Release
          cp -r glslang/build-debug/include/ Win/glslang/Include
      
      - name: Zip Release Package
        run: 7z a Win.zip Win
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: ${{ github.event.inputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "Win-${{ github.event.inputs.version }}"
          release_name: "Win-${{ github.event.inputs.version }}"
          draft: false
          prerelease: false
      
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        if: ${{ github.event.inputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Win.zip
          asset_name: Win.zip
          asset_content_type: application/zip

  release-macos:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - name: Update SubModules
        run: |
          git submodule init
          git submodule update
          
      - name: Create Archive Directories
        run: |
          mkdir MacOS
          mkdir MacOS/entt
          mkdir MacOS/entt/Include
          mkdir MacOS/glm
          mkdir MacOS/glm/Include
          mkdir MacOS/rapidjson
          mkdir MacOS/rapidjson/Include
          mkdir MacOS/taskflow
          mkdir MacOS/taskflow/Include
          mkdir MacOS/glfw
          mkdir MacOS/glfw/Include
          mkdir MacOS/glfw/Lib
          mkdir MacOS/glfw/Lib/Debug
          mkdir MacOS/glfw/Lib/Release
          mkdir MacOS/gflags
          mkdir MacOS/gflags/Include
          mkdir MacOS/gflags/Lib
          mkdir MacOS/gflags/Lib/Debug
          mkdir MacOS/gflags/Lib/Release
          mkdir MacOS/assimp
          mkdir MacOS/assimp/Include
          mkdir MacOS/assimp/Lib
          mkdir MacOS/assimp/Lib/Debug
          mkdir MacOS/assimp/Lib/Release
          mkdir MacOS/googletest
          mkdir MacOS/googletest/Include
          mkdir MacOS/googletest/Lib
          mkdir MacOS/googletest/Lib/Debug
          mkdir MacOS/googletest/Lib/Release
          mkdir MacOS/glslang
          mkdir MacOS/glslang/Lib
          mkdir MacOS/glslang/Lib/Debug
          mkdir MacOS/glslang/Lib/Release
      
      - name: Archiving CMakeLists
        run: |
          cp CMakeLists.txt MacOS
          
      - name: Modifying CMakeLists
        run: |
          echo 'set(EXP_3RD_VERSION ${{ github.event.inputs.version }} CACHE INTERNAL "Current thirdparty version.")' >> MacOS/CMakeLists.txt


      - name: Archiving EnTT
        run: |
          cp -r entt/single_include/entt MacOS/entt/Include
      
      - name: Archiving GLM
        run: |
          cp -r glm/glm MacOS/glm/Include/glm
          rm MacOS/glm/Include/glm/CMakeLists.txt
      
      - name: Archiving rapidjson
        run: |
          cp -r rapidjson/include/rapidjson MacOS/rapidjson/Include/rapidjson
      
      - name: Archiving TaskFlow
        run: |
          cp -r taskflow/taskflow MacOS/taskflow/Include/taskflow
      
      - name: Building GFlags
        run: |
          cmake -S gflags -B gflags/build-debug -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON -DBUILD_gflags_LIB=OFF -DBUILD_gflags_nothreads_LIB=ON -DBUILD_PACKAGING=OFF -DBUILD_TESTING=OFF -DINSTALL_HEADERS=ON -DINSTALL_SHARED_LIBS=OFF -DINSTALL_STATIC_LIBS=ON -DREGISTER_BUILD_DIR=OFF -DREGISTER_INSTALL_PREFIX=OFF -DCMAKE_INSTALL_PREFIX=gflags/build-debug/install
          cmake --build gflags/build-debug -j 8
          cmake --install gflags/build-debug
          cmake -S gflags -B gflags/build-release -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON -DBUILD_gflags_LIB=OFF -DBUILD_gflags_nothreads_LIB=ON -DBUILD_PACKAGING=OFF -DBUILD_TESTING=OFF -DINSTALL_HEADERS=ON -DINSTALL_SHARED_LIBS=OFF -DINSTALL_STATIC_LIBS=ON -DREGISTER_BUILD_DIR=OFF -DREGISTER_INSTALL_PREFIX=OFF -DCMAKE_INSTALL_PREFIX=gflags/build-release/install
          cmake --build gflags/build-release -j 8
          cmake --install gflags/build-release
      
      - name: Archiving GFlags
        run: |
          cp -r gflags/build-debug/install/include/ MacOS/gflags/Include
          cp -r gflags/build-debug/install/lib/ MacOS/gflags/Lib/Debug
          cp -r gflags/build-release/install/lib/ MacOS/gflags/Lib/Release
      
      - name: Building Assimp
        run: |
          cmake -S assimp -B assimp/build-debug -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=OFF -DASSIMP_BUILD_TESTS=OFF
          cmake --build assimp/build-debug -j 8
          cmake -S assimp -B assimp/build-release -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DASSIMP_BUILD_TESTS=OFF
          cmake --build assimp/build-release -j 8
      
      - name: Archiving Assimp
        run: |
          cp -r assimp/include/ MacOS/assimp/Include
          cp assimp/build-debug/include/assimp/config.h MacOS/assimp/Include/assimp
          cp -r assimp/build-debug/lib/ MacOS/assimp/Lib/Debug
          cp -r assimp/build-release/lib/ MacOS/assimp/Lib/Release
          
      - name: Building GLFW
        run: |
          mkdir glfw/build-debug
          cmake -S glfw -B glfw/build-debug -DCMAKE_BUILD_TYPE=Debug -DGLFW_BUILD_EXAMPLES=false -DGLFW_BUILD_TESTS=false -DGLFW_BUILD_DOCS=false
          cmake --build glfw/build-debug -j 8
          mkdir glfw/build-release
          cmake -S glfw -B glfw/build-release -DCMAKE_BUILD_TYPE=Release -DGLFW_BUILD_EXAMPLES=false -DGLFW_BUILD_TESTS=false -DGLFW_BUILD_DOCS=false
          cmake --build glfw/build-release -j 8
      
      - name: Archiving GLFW
        run: |
          cp glfw/build-debug/src/libglfw3.a MacOS/glfw/Lib/Debug
          cp glfw/build-release/src/libglfw3.a MacOS/glfw/Lib/Release
          cp -r glfw/include/GLFW MacOS/glfw/Include/GLFW
          
      - name: Building GoogleTest
        run: |
          mkdir googletest/build-debug
          cmake -S googletest -B googletest/build-debug -DCMAKE_BUILD_TYPE=Debug
          cmake --build googletest/build-debug -j 8
          mkdir googletest/build-release
          cmake -S googletest -B googletest/build-release -DCMAKE_BUILD_TYPE=Release
          cmake --build googletest/build-release -j 8
      
      - name: Archiving Google Test
        run: |
          cp googletest/build-debug/lib/libgtestd.a MacOS/googletest/Lib/Debug
          cp googletest/build-debug/lib/libgmockd.a MacOS/googletest/Lib/Debug
          cp googletest/build-debug/lib/libgtest_maind.a MacOS/googletest/Lib/Debug
          cp googletest/build-debug/lib/libgmock_maind.a MacOS/googletest/Lib/Debug
          cp googletest/build-release/lib/libgtest.a MacOS/googletest/Lib/Release
          cp googletest/build-release/lib/libgmock.a MacOS/googletest/Lib/Release
          cp googletest/build-release/lib/libgtest_main.a MacOS/googletest/Lib/Release
          cp googletest/build-release/lib/libgmock_main.a MacOS/googletest/Lib/Release
          cp -r googletest/googletest/include/gtest MacOS/googletest/Include/gtest
          cp -r googletest/googlemock/include/gmock MacOS/googletest/Include/gmock

      - name: Building Glslang
        run: |
          mkdir glslang/build-debug
          cmake -S glslang -B glslang/build-debug -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=false -DENABLE_CTEST=false -DCMAKE_INSTALL_PREFIX=glslang/build-debug
          cmake --build glslang/build-debug --config Debug -j 8
          cmake --install glslang/build-debug --config Debug
          mkdir glslang/build-release
          cmake -S glslang -B glslang/build-release -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=false -DENABLE_CTEST=false -DCMAKE_INSTALL_PREFIX=glslang/build-release
          cmake --build glslang/build-release --config Release -j 8
          cmake --install glslang/build-release --config Release

      - name: Archiving Glslang
        run: |
          cp -r glslang/build-debug/lib/ MacOS/glslang/Lib/Debug
          cp -r glslang/build-release/lib/ MacOS/glslang/Lib/Release
          cp -r glslang/build-debug/include/ MacOS/glslang/Include
      
      - name: Zip Release Package
        run: |
          zip -r MacOS MacOS
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: ${{ github.event.inputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "MacOS-${{ github.event.inputs.version }}"
          release_name: "MacOS-${{ github.event.inputs.version }}"
          draft: false
          prerelease: false
      
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        if: ${{ github.event.inputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: MacOS.zip
          asset_name: MacOS.zip
          asset_content_type: application/zip
